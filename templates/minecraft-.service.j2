# vi: ft=systemd
[Unit]
Description=Minecraft Server - {{ minecraft_server_name }}
After=syslog.target network.target
Requires=minecraft-{{ minecraft_server_name }}.socket

[Service]
User={{ minecraft_user }}
Group={{ minecraft_group }}

ProtectHome=true
ProtectSystem=full
PrivateDevices=True
PrivateTmp=True
PrivateUsers=true
ProtectControlGroups=true
ProtectKernelModules=true
ProtectKernelTunables=true

WorkingDirectory={{ minecraft_server_root }}/{{ minecraft_server_name }}
StandardInput=socket
StandardOutput=journal
StandardError=journal

Restart=always
RestartSec=15s

ExecStartPre=/usr/bin/find . -name "*.ansible" -exec /bin/bash -c '/usr/bin/cp "$$1" "$${1%.ansible}"' - '{}' +
ExecStart=/usr/bin/java -server -Xms{{ minecraft_min_ram }} -Xmx{{ minecraft_max_ram }} {{ minecraft_java_flags }} -jar server.jar nogui
# Running 'save-all' first as a safety measure if anything goes wrong during the stop command.
ExecStop=/bin/sh -c "/usr/bin/echo 'save-all' > /run/minecraft-{{ minecraft_server_name }}/console"
ExecStop=/bin/sh -c "/usr/bin/echo 'stop' > /run/minecraft-{{ minecraft_server_name }}/console"
# HACK: Here to avoid previous commands to carry over to the new started program.
ExecStopPost=/bin/sh -c "/usr/bin/timeout --preserve-status 1s /usr/bin/cat /run/minecraft-{{ minecraft_server_name }}/console > /dev/null 2>&1"
# Due to Minecraft not respecting the different kill signals, we essentally have to let it run its own
# stop command. This also makes it extremely difficult to know if our service has locked up, or is
# just taking its time to shut down. NOTE: In the future id love to have an alternative way to do this.
SuccessExitStatus=143

KillSignal=SIGCONT
TimeoutStopSec=60s
FinalKillSignal=SIGINT

[Install]
WantedBy=multi-user.target
